{"ast":null,"code":"var _jsxFileName = \"/Users/geunseonkim/react/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from \"react\";\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    });\n    const getWeatherInfo = async (lat, lon) => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      let response = await fetch(url);\n      let data = await response.json();\n      setWeather(data);\n    };\n  };\n  const getWeatherByCity = async () => {\n    const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(\"data?\", data);\n    setWeather(data);\n  };\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  useEffect(() => {\n    console.log(\"city?\", city);\n    getWeatherByCity();\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {\n        cities: cities,\n        setCity: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lqIZikLgGnnCX/Gc16gewoYX888=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","WeatherBox","WeatherButton","jsxDEV","_jsxDEV","App","_s","weather","setWeather","cities","city","setCity","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherInfo","API_KEY","url","response","fetch","data","json","getWeatherByCity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/geunseonkim/react/weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useEffect, useState} from \"react\"\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\n\n\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nfunction App() {\n\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    })\n\n    const getWeatherInfo = async(lat, lon) => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      let response = await fetch(url);\n      let data = await response.json();\n      setWeather(data);\n    }\n  }\n\n  const getWeatherByCity = async() => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n      let response = await fetch(url);\n      let data = await response.json();\n      console.log(\"data?\", data);\n      setWeather(data);\n  }\n\n  useEffect(()=>{\n    getCurrentLocation();\n  }, [])\n\n\n  useEffect(()=>{\n    console.log(\"city?\",city);\n    getWeatherByCity();\n  }, [city])\n\n  return (\n    \n    <div className=\"container\">\n      <div>\n        <WeatherBox weather={weather}/>\n        <WeatherButton cities={cities} setCity={setCity}/>\n        {/* 함수도 props로 받을 수 있다. */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}