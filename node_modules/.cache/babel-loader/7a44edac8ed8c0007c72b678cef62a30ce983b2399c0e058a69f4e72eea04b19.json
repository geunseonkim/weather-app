{"ast":null,"code":"var _jsxFileName = \"/Users/geunseonkim/react/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from \"react\";\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n  let [loading, setLoading] = useState(true);\n  const [apiError, setAPIError] = useState(\"\");\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    });\n    const getWeatherInfo = async (lat, lon) => {\n      try {\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n        setLoading(true);\n        let response = await fetch(url);\n        let data = await response.json();\n        setLoading(false);\n        setWeather(data);\n      } catch (error) {\n        setLoading(false);\n        setAPIError(error.message);\n      }\n    };\n  };\n  const getWeatherByCity = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      //console.log(\"data?\", data);\n      setLoading(false);\n      setWeather(data);\n    } catch (error) {\n      setLoading(false);\n      setAPIError(error.message);\n    }\n  };\n  useEffect(() => {\n    if (city === \"\") {\n      getCurrentLocation();\n    } else {\n      getWeatherByCity(); // 상황에 따라 실행하는 함수를 나눠준다. city 정보가 없을 때는 geocode를 받도록 한다.\n    }\n  }, [city]);\n  const currentCity = city => {\n    if (city === \"current\") {\n      setCity(\"\");\n    } else {\n      setCity(city);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n        color: \"#FFA500\",\n        loading: loading,\n        size: 130\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this) : !apiError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {\n          cities: cities,\n          currentCity: currentCity,\n          setCity: setCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }, this) : apiError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jKfsPdxBbkISvo4so15g1UESJA8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","WeatherBox","WeatherButton","ClipLoader","jsxDEV","_jsxDEV","App","_s","API_KEY","weather","setWeather","cities","city","setCity","loading","setLoading","apiError","setAPIError","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherInfo","url","response","fetch","data","json","error","message","getWeatherByCity","currentCity","children","className","color","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/geunseonkim/react/weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useEffect, useState} from \"react\"\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nfunction App() {\n  const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n  let [loading, setLoading] = useState(true);\n  const [apiError, setAPIError] = useState(\"\");\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    })\n\n    const getWeatherInfo = async(lat, lon) => {\n      try{\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      setLoading(false);\n      setWeather(data);\n      } catch (error) {\n        setLoading(false);\n        setAPIError(error.message);\n      }\n    }\n  }\n\n    const getWeatherByCity = async() => {\n      try{\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      //console.log(\"data?\", data);\n      setLoading(false);\n      setWeather(data);\n      } catch (error) {\n        setLoading(false);\n        setAPIError(error.message);\n      }\n  }\n\n  useEffect(()=>{\n    if(city === \"\") {\n      getCurrentLocation();\n    } else {\n      getWeatherByCity(); // 상황에 따라 실행하는 함수를 나눠준다. city 정보가 없을 때는 geocode를 받도록 한다.\n    }\n  }, [city])\n\n  const currentCity = (city) => {\n    if(city === \"current\") {\n      setCity(\"\");\n    } else {\n      setCity(city);\n    }\n  }\n\n  return (\n    <div>\n      {\n      loading ?\n      (<div className=\"container\">\n        <ClipLoader color=\"#FFA500\" loading={loading} size={130} />\n        </div>)\n        : !apiError ?\n      (<div className=\"container\">\n        <div>\n          <WeatherBox weather={weather}/>\n          <WeatherButton cities={cities} currentCity={currentCity} setCity={setCity}/>\n          {/* 함수도 props로 받을 수 있다. */}\n        </div>\n      </div>)\n      :(apiError)\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}