{"ast":null,"code":"var _jsxFileName = \"/Users/geunseonkim/react/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect } from \"react\";\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    });\n    const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n    const getWeatherInfo = async (lat, lon) => {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      const data = await response.json();\n      console.data;\n    };\n  };\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","App","_s","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherInfo","API_KEY","response","fetch","data","json","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/geunseonkim/react/weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport {useEffect} from \"react\"\n\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nfunction App() {\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    })\n\n    const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n    const getWeatherInfo = async(lat, lon) => {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      const data = await response.json();\n      console.data;\n    }\n  }\n  useEffect(()=>{\n    getCurrentLocation();\n  }, [])\n  return (\n    <div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAAQA,SAAS,QAAO,OAAO;;AAG/B;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;MACrD,IAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MAClC,IAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MACnCC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEN,GAAG,EAAE,KAAK,EAAEG,GAAG,CAAC;MACnCI,cAAc,CAACP,GAAG,EAAEG,GAAG,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMK,OAAO,GAAI,kCAAiC;IAClD,MAAMD,cAAc,GAAG,MAAAA,CAAMP,GAAG,EAAEG,GAAG,KAAK;MACxC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,uDAAsDV,GAAI,QAAOG,GAAI,UAASK,OAAQ,eAAc,CAAC;MACnI,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCP,OAAO,CAACM,IAAI;IACd,CAAC;EACH,CAAC;EACDrB,SAAS,CAAC,MAAI;IACZK,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,oBACEH,OAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEV;AAACtB,EAAA,CAvBQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAyBZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}