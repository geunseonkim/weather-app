{"ast":null,"code":"var _jsxFileName = \"/Users/geunseonkim/react/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from \"react\";\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n  let [loading, setLoading] = useState(true);\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    });\n    const getWeatherInfo = async (lat, lon) => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      setWeather(data);\n      setLoading(false);\n    };\n  };\n  const getWeatherByCity = async () => {\n    const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    setLoading(true);\n    let response = await fetch(url);\n    let data = await response.json();\n    //console.log(\"data?\", data);\n    setWeather(data);\n    setLoading(false);\n  };\n  const currentCity = city => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  };\n  useEffect(() => {\n    if (city == \"\") {\n      getCurrentLocation();\n    } else {\n      getWeatherByCity(); // 상황에 따라 실행하는 함수를 나눠준다. city 정보가 없을 때는 geocode를 받도록 한다.\n    }\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n        color: \"#FFA500\",\n        loading: loading,\n        size: 130\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {\n          cities: cities,\n          setCity: setCity,\n          currentCity: currentCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xQzzR4Ntg86DVqjBj/1M9IAkV6s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","WeatherBox","WeatherButton","ClipLoader","jsxDEV","_jsxDEV","App","_s","weather","setWeather","cities","city","setCity","loading","setLoading","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherInfo","API_KEY","url","response","fetch","data","json","getWeatherByCity","currentCity","children","className","color","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/geunseonkim/react/weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useEffect, useState} from \"react\"\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n\n// 1. 앱이 실행되면 현재 위치 기반의 날씨가 나온다.\n// 2. 유저에게 주는 정보: 섭씨, 화씨, 날씨 정보.\n// 3. 날씨 밑에 5개의 버튼이 있다. (현재 위치 1, 다른 도시 4)\n// 4. 유저는 버튼을 클릭하면 다른 도시의 날씨 정보도 볼 수 있다.\n// 5. 버튼을 클릭할 때마다(데이터 로딩시) 로딩 스피너가 보인다.\nfunction App() {\n\n  const [weather, setWeather] = useState(null);\n  const cities = [\"Toronto\", \"Calgary\", \"Montreal\", \"Quebec\"];\n  const [city, setCity] = useState(\"\");\n  let [loading, setLoading] = useState(true);\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      console.log(\"lat\", lat, \"lon\", lon);\n      getWeatherInfo(lat, lon);\n    })\n\n    const getWeatherInfo = async(lat, lon) => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      setWeather(data);\n      setLoading(false);\n    }\n  }\n\n  const getWeatherByCity = async() => {\n      const API_KEY = `3b56745dd240621d3eaad2aac3d8a827`;\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n      setLoading(true);\n      let response = await fetch(url);\n      let data = await response.json();\n      //console.log(\"data?\", data);\n      setWeather(data);\n      setLoading(false);\n  }\n\n  const currentCity = (city) => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  }\n\n  useEffect(()=>{\n    if(city==\"\") {\n      getCurrentLocation();\n    } else {\n      getWeatherByCity(); // 상황에 따라 실행하는 함수를 나눠준다. city 정보가 없을 때는 geocode를 받도록 한다.\n    }\n  }, [city])\n\n  return (\n    <div>\n      {loading?\n      <div className=\"container\">\n        <ClipLoader\n          color=\"#FFA500\"\n          loading={loading}\n          size={130}\n        />\n        </div>:\n      <div className=\"container\">\n        <div>\n          <WeatherBox weather={weather}/>\n          <WeatherButton cities={cities} setCity={setCity} currentCity={currentCity}/>\n          {/* 함수도 props로 받을 수 있다. */}\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}